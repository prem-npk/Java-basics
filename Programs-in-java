Mortgage Program:
-----------------
import java.lang.reflect.Array;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args){
        final byte MONTHS_IN_YEARS=12;
        final byte PERCENT=100;

        Scanner scanner=new Scanner(System.in);
        System.out.print("Principal:");
        int principal=scanner.nextInt();

        System.out.print("Annual Interest:");
        float annualInterest=scanner.nextFloat();
        float monthlyInterst=annualInterest/PERCENT/MONTHS_IN_YEARS;

        System.out.print("Period of (Years):");
        byte years=scanner.nextByte();
        int numberOfPayments=years*MONTHS_IN_YEARS;

        double mortgage=principal*(monthlyInterst*Math.pow(1+monthlyInterst,numberOfPayments))/(Math.pow(1+monthlyInterst,numberOfPayments)-1);

        String mortgageFormatted= NumberFormat.getInstance().format(mortgage);
        System.out.println("Mortgage: "+mortgageFormatted);
    }
}
//output:
Principal:10000
Annual Interest:5
Period of (Years):1
Mortgage: 856.064
============================================================================================================================================================================
Create a random string:
----------------------
import java.util.Random;

class RandomString{
    public String generateString(int num){
        StringBuffer sb=new StringBuffer();
        Random random=new Random();
        for(int i=0;i<num;i++){
            char randomchar=(char)(97+random.nextInt(26));
            sb.append(randomchar);
        }
        return sb.toString();
    }
    
    public static void main(String[] args){
        int n=10;
        RandomString rs=new RandomString();
        String str=rs.generateString(n);
        System.out.println(str);
    }
}
//output:
dmopuyucoy

Explanation:
------------
1. StringBuffer is mutable, which means it allows modifications to the existing object without creating a new one for the same variable. It is designed to be thread-safe, allowing multiple threads to handle it simultaneously without causing data inconsistencies.

2. StringBuilder is also mutable, but unlike StringBuffer, it is not thread-safe. Therefore, it is not suitable for concurrent operations from multiple threads simultaneously. StringBuilder is more efficient than StringBuffer in single-threaded scenarios.

So, to summarize:

- StringBuffer: Mutable and thread-safe (suitable for multi-threaded scenarios).
- StringBuilder: Mutable but not thread-safe (more efficient in single-threaded scenarios).
============================================================================================================================================================================












